"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const Temperatura_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Temperatura"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class TemperaturasController {
    async InsertAllDataSensor({ response }) {
        try {
            var x, w;
            w = await Temperatura_1.default.all();
            await Database_1.default.rawQuery("DELETE FROM Temperaturas");
            await axios_1.default.get('https://thingspeak.com/channels/935349/field/1.json')
                .then((r) => {
                x = r.data.feeds;
                Temperatura_1.default.createMany(x);
            }).catch((m) => {
                Temperatura_1.default.createMany(w);
            });
            response.ok({ message: "Registrados correctamente" });
        }
        catch (error) {
            response.badRequest({ message: "Error al registrar" });
        }
    }
    async MostrarInfo({ response }) {
        try {
            const temp = await Temperatura_1.default.all();
            response.ok({ message: "datos", data: temp });
        }
        catch (error) {
            response.badRequest({ message: "error al mostrar" });
        }
    }
    async EliminarTodo({ response }) {
        try {
            await Database_1.default.rawQuery("DELETE FROM Temperaturas");
            response.ok({ message: "Eliminado correctamente" });
        }
        catch (error) {
            response.badRequest({ message: "No existen datos" });
        }
    }
}
exports.default = TemperaturasController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVtcGVyYXR1cmFzQ29udHJvbGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlRlbXBlcmF0dXJhc0NvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxrREFBMEI7QUFDMUIsK0ZBQWdEO0FBQ2hELDJGQUFrRDtBQUlsRCxNQUFxQixzQkFBc0I7SUFHdkMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEVBQUMsUUFBUSxFQUFDO1FBRWhDLElBQUc7WUFDQyxJQUFJLENBQUMsRUFBQyxDQUFDLENBQUM7WUFFUixDQUFDLEdBQUcsTUFBTSxxQkFBVyxDQUFDLEdBQUcsRUFBRSxDQUFBO1lBRTNCLE1BQU0sa0JBQVEsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtZQUNuRCxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMscURBQXFELENBQUM7aUJBQ2pFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNSLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtnQkFDaEIscUJBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDakMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUU7Z0JBQ1YscUJBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDN0IsQ0FBQyxDQUFDLENBQUM7WUFDSCxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFDLDJCQUEyQixFQUFDLENBQUMsQ0FBQTtTQUNyRDtRQUNELE9BQU0sS0FBSyxFQUFDO1lBQ1IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxDQUFDLENBQUE7U0FDdEQ7SUFDTCxDQUFDO0lBQ0QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxFQUFDLFFBQVEsRUFBcUI7UUFFNUMsSUFBRztZQUNDLE1BQU0sSUFBSSxHQUFHLE1BQU0scUJBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUNwQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFDLE9BQU8sRUFBQyxJQUFJLEVBQUMsSUFBSSxFQUFDLENBQUMsQ0FBQTtTQUMzQztRQUNELE9BQU0sS0FBSyxFQUFDO1lBQ1IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxDQUFDLENBQUE7U0FDcEQ7SUFDTCxDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVksQ0FBQyxFQUFDLFFBQVEsRUFBcUI7UUFFN0MsSUFBRztZQUNDLE1BQU0sa0JBQVEsQ0FBQyxRQUFRLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtZQUNuRCxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFDLHlCQUF5QixFQUFDLENBQUMsQ0FBQTtTQUNuRDtRQUNELE9BQU0sS0FBSyxFQUFDO1lBQ1IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxDQUFDLENBQUE7U0FDcEQ7SUFDTCxDQUFDO0NBQ0o7QUE3Q0QseUNBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgVGVtcGVyYXR1cmEgZnJvbSAnQXBwL01vZGVscy9UZW1wZXJhdHVyYSdcbmltcG9ydCBEYXRhYmFzZSBmcm9tICdAaW9jOkFkb25pcy9MdWNpZC9EYXRhYmFzZSc7XG4vKiBpbXBvcnQgeyBSZXF1ZXN0IH0gZnJvbSAnQGFkb25pc2pzL2NvcmUvYnVpbGQvc3RhbmRhbG9uZSc7XG4gdmFyICBheGlvcyA9cmVxdWlyZSgnYXhpb3MnKSAqL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZW1wZXJhdHVyYXNDb250cm9sbGVyIHtcblxuXG4gICAgYXN5bmMgSW5zZXJ0QWxsRGF0YVNlbnNvcih7cmVzcG9uc2V9KSB7XG5cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgdmFyIHgsdztcblxuICAgICAgICAgICAgdyA9IGF3YWl0IFRlbXBlcmF0dXJhLmFsbCgpXG4gICAgXG4gICAgICAgICAgICBhd2FpdCBEYXRhYmFzZS5yYXdRdWVyeShcIkRFTEVURSBGUk9NIFRlbXBlcmF0dXJhc1wiKVxuICAgICAgICAgICAgYXdhaXQgYXhpb3MuZ2V0KCdodHRwczovL3RoaW5nc3BlYWsuY29tL2NoYW5uZWxzLzkzNTM0OS9maWVsZC8xLmpzb24nKVxuICAgICAgICAgICAgICAgIC50aGVuKChyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHggPSByLmRhdGEuZmVlZHNcbiAgICAgICAgICAgICAgICAgICAgVGVtcGVyYXR1cmEuY3JlYXRlTWFueSh4KVxuICAgICAgICAgICAgfSkuY2F0Y2goKG0pPT57XG4gICAgICAgICAgICAgICAgVGVtcGVyYXR1cmEuY3JlYXRlTWFueSh3KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXNwb25zZS5vayh7bWVzc2FnZTpcIlJlZ2lzdHJhZG9zIGNvcnJlY3RhbWVudGVcIn0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xuICAgICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdCh7bWVzc2FnZTpcIkVycm9yIGFsIHJlZ2lzdHJhclwifSlcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBNb3N0cmFySW5mbyh7cmVzcG9uc2V9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuXG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBUZW1wZXJhdHVyYS5hbGwoKVxuICAgICAgICAgICAgcmVzcG9uc2Uub2soe21lc3NhZ2U6XCJkYXRvc1wiLGRhdGE6dGVtcH0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xuICAgICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdCh7bWVzc2FnZTpcImVycm9yIGFsIG1vc3RyYXJcIn0pXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgYXN5bmMgRWxpbWluYXJUb2RvKHtyZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCl7XG5cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgYXdhaXQgRGF0YWJhc2UucmF3UXVlcnkoXCJERUxFVEUgRlJPTSBUZW1wZXJhdHVyYXNcIilcbiAgICAgICAgICAgIHJlc3BvbnNlLm9rKHttZXNzYWdlOlwiRWxpbWluYWRvIGNvcnJlY3RhbWVudGVcIn0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xuICAgICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdCh7bWVzc2FnZTpcIk5vIGV4aXN0ZW4gZGF0b3NcIn0pXG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=