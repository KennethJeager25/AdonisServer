"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class AuthController {
    async login({ response, request, auth }) {
        const email = await request.input('email');
        const password = await request.input('password');
        try {
            const token = await auth.attempt(email, password);
            response.ok({ message: "login correcto", token: token });
        }
        catch (error) {
            response.unauthorized({ message: "credenciales invalidas" });
        }
    }
    async registrar({ request, response, auth }) {
        try {
            const password = request.input('password');
            const data = request.all();
            const user = await User_1.default.create(data);
            const token = await auth.attempt(user.email, password);
            response.ok({ message: "Registro Correcto", token: token });
        }
        catch (error) {
            response.badRequest({ message: "datos incorrectos" });
        }
    }
    async logout({ auth, response }) {
        try {
            await auth.use('api').revoke();
            response.ok({ message: "deslogueo correctamente" });
        }
        catch {
            response.internalServerError({ message: "ocurrio un error" });
        }
    }
    async userDato({ response, auth }) {
        try {
            response.ok({ message: "datos del usuario encontrados", data: auth.user });
        }
        catch (error) {
            response.badRequest({ message: "El usuario no existe o token caducado" });
        }
    }
    async index({ response }) {
        try {
            const user = await User_1.default.all();
            response.ok({ message: "Consulta Correcta", data: user });
        }
        catch (error) {
            response.badRequest("Ocurrio algo malo, checalo");
        }
    }
}
exports.default = AuthController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aENvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJBdXRoQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGlGQUFrQztBQUVsQyxNQUFxQixjQUFjO0lBRXhCLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBcUI7UUFFNUQsTUFBTSxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzFDLE1BQU0sUUFBUSxHQUFHLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUNoRCxJQUFHO1lBQ0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUNqRCxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBQyxLQUFLLEVBQUMsQ0FBQyxDQUFBO1NBQ3hEO1FBQ0QsT0FBTSxLQUFLLEVBQUM7WUFDUixRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUMsT0FBTyxFQUFFLHdCQUF3QixFQUFDLENBQUMsQ0FBQTtTQUM3RDtJQUNMLENBQUM7SUFHTSxLQUFLLENBQUMsU0FBUyxDQUFDLEVBQUMsT0FBTyxFQUFDLFFBQVEsRUFBQyxJQUFJLEVBQXFCO1FBRTlELElBQUc7WUFDQSxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1lBQzFDLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQTtZQUUxQixNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7WUFFcEMsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUMsUUFBUSxDQUFDLENBQUE7WUFFckQsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxtQkFBbUIsRUFBRSxLQUFLLEVBQUMsS0FBSyxFQUFDLENBQUMsQ0FBQTtTQUN6RDtRQUNELE9BQU0sS0FBSyxFQUFDO1lBQ1IsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxDQUFDLENBQUE7U0FDckQ7SUFDTCxDQUFDO0lBR00sS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksRUFBQyxRQUFRLEVBQXFCO1FBQ25ELElBQUc7WUFDQyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUE7WUFDOUIsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxDQUFDLENBQUE7U0FDbkQ7UUFDRCxNQUFLO1lBQ0QsUUFBUSxDQUFDLG1CQUFtQixDQUFDLEVBQUMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLENBQUMsQ0FBQTtTQUM3RDtJQUNMLENBQUM7SUFJTSxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBcUI7UUFDdEQsSUFBRztZQUNDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUMsK0JBQStCLEVBQUMsSUFBSSxFQUFDLElBQUksQ0FBQyxJQUFJLEVBQUMsQ0FBQyxDQUFBO1NBQ3hFO1FBQ0QsT0FBTSxLQUFLLEVBQUM7WUFDUixRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUMsT0FBTyxFQUFDLHVDQUF1QyxFQUFDLENBQUMsQ0FBQTtTQUN6RTtJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsUUFBUSxFQUF1QjtRQUNoRCxJQUFHO1lBQ0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsR0FBRyxFQUFFLENBQUE7WUFFN0IsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQTtTQUN4RDtRQUNELE9BQU0sS0FBSyxFQUNYO1lBQ0UsUUFBUSxDQUFDLFVBQVUsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFBO1NBQ2xEO0lBQ0wsQ0FBQztDQUVKO0FBbkVELGlDQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXInXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhDb250cm9sbGVyIHtcblxuICAgIHB1YmxpYyBhc3luYyBsb2dpbih7cmVzcG9uc2UsIHJlcXVlc3QsIGF1dGh9Okh0dHBDb250ZXh0Q29udHJhY3Qpe1xuXG4gICAgICAgIGNvbnN0IGVtYWlsID0gYXdhaXQgcmVxdWVzdC5pbnB1dCgnZW1haWwnKVxuICAgICAgICBjb25zdCBwYXNzd29yZCA9IGF3YWl0IHJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJylcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCBhdXRoLmF0dGVtcHQoZW1haWwsIHBhc3N3b3JkKVxuICAgICAgICAgICAgcmVzcG9uc2Uub2soe21lc3NhZ2U6IFwibG9naW4gY29ycmVjdG9cIiwgdG9rZW46dG9rZW59KVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGVycm9yKXtcbiAgICAgICAgICAgIHJlc3BvbnNlLnVuYXV0aG9yaXplZCh7bWVzc2FnZTogXCJjcmVkZW5jaWFsZXMgaW52YWxpZGFzXCJ9KVxuICAgICAgICB9XG4gICAgfVxuICAgIFxuXG4gICAgcHVibGljIGFzeW5jIHJlZ2lzdHJhcih7cmVxdWVzdCxyZXNwb25zZSxhdXRofTpIdHRwQ29udGV4dENvbnRyYWN0KXtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxdWVzdC5pbnB1dCgncGFzc3dvcmQnKVxuICAgICAgICAgICBjb25zdCBkYXRhID0gcmVxdWVzdC5hbGwoKVxuXG4gICAgICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmNyZWF0ZShkYXRhKVxuXG4gICAgICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgYXV0aC5hdHRlbXB0KHVzZXIuZW1haWwscGFzc3dvcmQpXG5cbiAgICAgICAgICAgcmVzcG9uc2Uub2soe21lc3NhZ2U6XCJSZWdpc3RybyBDb3JyZWN0b1wiLCB0b2tlbjp0b2tlbn0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xuICAgICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdCh7bWVzc2FnZTpcImRhdG9zIGluY29ycmVjdG9zXCJ9KVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgYXN5bmMgbG9nb3V0KHthdXRoLHJlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgYXdhaXQgYXV0aC51c2UoJ2FwaScpLnJldm9rZSgpXG4gICAgICAgICAgICByZXNwb25zZS5vayh7bWVzc2FnZTpcImRlc2xvZ3VlbyBjb3JyZWN0YW1lbnRlXCJ9KVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoe1xuICAgICAgICAgICAgcmVzcG9uc2UuaW50ZXJuYWxTZXJ2ZXJFcnJvcih7bWVzc2FnZTpcIm9jdXJyaW8gdW4gZXJyb3JcIn0pXG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgcHVibGljIGFzeW5jIHVzZXJEYXRvKHtyZXNwb25zZSwgYXV0aH06SHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIHJlc3BvbnNlLm9rKHttZXNzYWdlOlwiZGF0b3MgZGVsIHVzdWFyaW8gZW5jb250cmFkb3NcIixkYXRhOmF1dGgudXNlcn0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xuICAgICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdCh7bWVzc2FnZTpcIkVsIHVzdWFyaW8gbm8gZXhpc3RlIG8gdG9rZW4gY2FkdWNhZG9cIn0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaW5kZXgoeyByZXNwb25zZSB9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIHRyeXtcbiAgICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgVXNlci5hbGwoKVxuICAgIFxuICAgICAgICAgIHJlc3BvbnNlLm9rKHttZXNzYWdlOiBcIkNvbnN1bHRhIENvcnJlY3RhXCIsIGRhdGE6IHVzZXJ9KVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGVycm9yKVxuICAgICAgICB7XG4gICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdChcIk9jdXJyaW8gYWxnbyBtYWxvLCBjaGVjYWxvXCIpXG4gICAgICAgIH1cbiAgICB9XG5cbn0iXX0=