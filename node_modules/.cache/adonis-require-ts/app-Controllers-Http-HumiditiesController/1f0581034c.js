"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const Humidity_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Humidity"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class HumiditiesController {
    async InsertarHumedad({ response }) {
        var x;
        try {
            await Database_1.default.rawQuery("DELETE FROM humidities");
            await axios_1.default.get('https://thingspeak.com/channels/935349/field/2.json')
                .then((r) => {
                x = r.data.feeds;
            }).catch((m) => {
                response.badRequest({ message: "no existen registros" });
            });
            Humidity_1.default.createMany(x);
            response.ok({ message: "Registrados correctamente", data: x });
        }
        catch (error) {
            response.badRequest({ message: "no existen registros" });
        }
    }
    async MostrarInfo({ response }) {
        try {
            const hum = await Humidity_1.default.all();
            response.ok({ message: "datos", data: hum });
        }
        catch (error) {
            response.badRequest({ message: "error al mostrar" });
        }
    }
    async EliminarTodo({ response }) {
        try {
            await Database_1.default.rawQuery("DELETE FROM humidities");
            response.ok({ message: "Eliminado correctamente" });
        }
        catch (error) {
            response.badRequest({ message: "No existen datos" });
        }
    }
}
exports.default = HumiditiesController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHVtaWRpdGllc0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJIdW1pZGl0aWVzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGtEQUEwQjtBQUMxQix5RkFBMkM7QUFDM0MsMkZBQWtEO0FBRWxELE1BQXFCLG9CQUFvQjtJQUVyQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUMsUUFBUSxFQUFDO1FBRTVCLElBQUksQ0FBQyxDQUFDO1FBRU4sSUFBRztZQUNDLE1BQU0sa0JBQVEsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtZQUNqRCxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMscURBQXFELENBQUM7aUJBQ3JFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNQLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtZQUNyQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUMsRUFBRTtnQkFDVixRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUMsT0FBTyxFQUFDLHNCQUFzQixFQUFDLENBQUMsQ0FBQTtZQUN6RCxDQUFDLENBQUMsQ0FBQztZQUNILGtCQUFRLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQ3RCLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsSUFBSSxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUE7U0FDNUQ7UUFDRCxPQUFNLEtBQUssRUFBQztZQUNSLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBQyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsQ0FBQyxDQUFBO1NBQ3hEO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBQyxRQUFRLEVBQXFCO1FBRTVDLElBQUc7WUFDQyxNQUFNLEdBQUcsR0FBRyxNQUFNLGtCQUFRLENBQUMsR0FBRyxFQUFFLENBQUE7WUFDaEMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxPQUFPLEVBQUMsSUFBSSxFQUFDLEdBQUcsRUFBQyxDQUFDLENBQUE7U0FDMUM7UUFDRCxPQUFNLEtBQUssRUFBQztZQUNSLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBQyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsQ0FBQyxDQUFBO1NBQ3BEO0lBQ0wsQ0FBQztJQUVELEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBQyxRQUFRLEVBQXFCO1FBRTdDLElBQUc7WUFDQyxNQUFNLGtCQUFRLENBQUMsUUFBUSxDQUFDLHdCQUF3QixDQUFDLENBQUE7WUFDakQsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxDQUFDLENBQUE7U0FDbkQ7UUFDRCxPQUFNLEtBQUssRUFBQztZQUNSLFFBQVEsQ0FBQyxVQUFVLENBQUMsRUFBQyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsQ0FBQyxDQUFBO1NBQ3BEO0lBQ0wsQ0FBQztDQUdKO0FBN0NELHVDQTZDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IEh1bWlkaXR5IGZyb20gJ0FwcC9Nb2RlbHMvSHVtaWRpdHknO1xuaW1wb3J0IERhdGFiYXNlIGZyb20gJ0Bpb2M6QWRvbmlzL0x1Y2lkL0RhdGFiYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSHVtaWRpdGllc0NvbnRyb2xsZXIge1xuXG4gICAgYXN5bmMgSW5zZXJ0YXJIdW1lZGFkKHtyZXNwb25zZX0pe1xuXG4gICAgICAgIHZhciB4O1xuXG4gICAgICAgIHRyeXtcbiAgICAgICAgICAgIGF3YWl0IERhdGFiYXNlLnJhd1F1ZXJ5KFwiREVMRVRFIEZST00gaHVtaWRpdGllc1wiKVxuICAgICAgICAgICAgYXdhaXQgYXhpb3MuZ2V0KCdodHRwczovL3RoaW5nc3BlYWsuY29tL2NoYW5uZWxzLzkzNTM0OS9maWVsZC8yLmpzb24nKVxuICAgICAgICAgICAgLnRoZW4oKHIpID0+IHtcbiAgICAgICAgICAgICAgICAgeCA9IHIuZGF0YS5mZWVkc1xuICAgICAgICAgICAgfSkuY2F0Y2goKG0pPT57XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdCh7bWVzc2FnZTpcIm5vIGV4aXN0ZW4gcmVnaXN0cm9zXCJ9KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBIdW1pZGl0eS5jcmVhdGVNYW55KHgpXG4gICAgICAgICAgICByZXNwb25zZS5vayh7bWVzc2FnZTpcIlJlZ2lzdHJhZG9zIGNvcnJlY3RhbWVudGVcIixkYXRhOnh9KVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGVycm9yKXtcbiAgICAgICAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lc3NhZ2U6XCJubyBleGlzdGVuIHJlZ2lzdHJvc1wifSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIE1vc3RyYXJJbmZvKHtyZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCl7XG5cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgY29uc3QgaHVtID0gYXdhaXQgSHVtaWRpdHkuYWxsKClcbiAgICAgICAgICAgIHJlc3BvbnNlLm9rKHttZXNzYWdlOlwiZGF0b3NcIixkYXRhOmh1bX0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xuICAgICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdCh7bWVzc2FnZTpcImVycm9yIGFsIG1vc3RyYXJcIn0pXG4gICAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgYXN5bmMgRWxpbWluYXJUb2RvKHtyZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCl7XG5cbiAgICAgICAgdHJ5e1xuICAgICAgICAgICAgYXdhaXQgRGF0YWJhc2UucmF3UXVlcnkoXCJERUxFVEUgRlJPTSBodW1pZGl0aWVzXCIpXG4gICAgICAgICAgICByZXNwb25zZS5vayh7bWVzc2FnZTpcIkVsaW1pbmFkbyBjb3JyZWN0YW1lbnRlXCJ9KVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoKGVycm9yKXtcbiAgICAgICAgICAgIHJlc3BvbnNlLmJhZFJlcXVlc3Qoe21lc3NhZ2U6XCJObyBleGlzdGVuIGRhdG9zXCJ9KVxuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbiJdfQ==