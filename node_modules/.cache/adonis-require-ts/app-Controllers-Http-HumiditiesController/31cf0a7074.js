"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const Humidity_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Humidity"));
const Database_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Lucid/Database"));
class HumiditiesController {
    async InsertarHumedad({ response }) {
        var x;
        try {
            await Database_1.default.rawQuery("DELETE FROM humidities");
            await axios_1.default.get('https://thingspeak.com/channels/935349/field/2.json')
                .then((r) => {
                x = r.data.feeds;
                Humidity_1.default.createMany(x);
            }).catch((m) => {
                response.badRequest({ message: "no existen registros" });
            });
            response.ok({ message: "Registrados correctamente", data: x });
        }
        catch (error) {
            response.badRequest({ message: "no existen registros" });
        }
    }
    async MostrarInfo({ response }) {
        try {
            const hum = await Humidity_1.default.all();
            response.ok({ message: "datos", data: hum });
        }
        catch (error) {
            response.badRequest({ message: "error al mostrar" });
        }
    }
    async EliminarTodo({ response }) {
        try {
            await Database_1.default.rawQuery("DELETE FROM humidities");
            response.ok({ message: "Eliminado correctamente" });
        }
        catch (error) {
            response.badRequest({ message: "No existen datos" });
        }
    }
}
exports.default = HumiditiesController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHVtaWRpdGllc0NvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJIdW1pZGl0aWVzQ29udHJvbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLGtEQUEwQjtBQUMxQix5RkFBMkM7QUFDM0MsMkZBQWtEO0FBRWxELE1BQXFCLG9CQUFvQjtJQUVyQyxLQUFLLENBQUMsZUFBZSxDQUFDLEVBQUMsUUFBUSxFQUFDO1FBRTVCLElBQUksQ0FBQyxDQUFDO1FBRU4sSUFBRztZQUNDLE1BQU0sa0JBQVEsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLENBQUMsQ0FBQTtZQUNqRCxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMscURBQXFELENBQUM7aUJBQ3JFLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO2dCQUNQLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQTtnQkFDakIsa0JBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDMUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFDLEVBQUU7Z0JBQ1YsUUFBUSxDQUFDLFVBQVUsQ0FBQyxFQUFDLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxDQUFDLENBQUE7WUFDekQsQ0FBQyxDQUFDLENBQUM7WUFDSCxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFDLDJCQUEyQixFQUFDLElBQUksRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBO1NBQzVEO1FBQ0QsT0FBTSxLQUFLLEVBQUM7WUFDUixRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUMsT0FBTyxFQUFDLHNCQUFzQixFQUFDLENBQUMsQ0FBQTtTQUN4RDtJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsV0FBVyxDQUFDLEVBQUMsUUFBUSxFQUFxQjtRQUU1QyxJQUFHO1lBQ0MsTUFBTSxHQUFHLEdBQUcsTUFBTSxrQkFBUSxDQUFDLEdBQUcsRUFBRSxDQUFBO1lBQ2hDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUMsT0FBTyxFQUFDLElBQUksRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFBO1NBQzFDO1FBQ0QsT0FBTSxLQUFLLEVBQUM7WUFDUixRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLENBQUMsQ0FBQTtTQUNwRDtJQUNMLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUMsUUFBUSxFQUFxQjtRQUU3QyxJQUFHO1lBQ0MsTUFBTSxrQkFBUSxDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFBO1lBQ2pELFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUMseUJBQXlCLEVBQUMsQ0FBQyxDQUFBO1NBQ25EO1FBQ0QsT0FBTSxLQUFLLEVBQUM7WUFDUixRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLENBQUMsQ0FBQTtTQUNwRDtJQUNMLENBQUM7Q0FHSjtBQTdDRCx1Q0E2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBIdW1pZGl0eSBmcm9tICdBcHAvTW9kZWxzL0h1bWlkaXR5JztcbmltcG9ydCBEYXRhYmFzZSBmcm9tICdAaW9jOkFkb25pcy9MdWNpZC9EYXRhYmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEh1bWlkaXRpZXNDb250cm9sbGVyIHtcblxuICAgIGFzeW5jIEluc2VydGFySHVtZWRhZCh7cmVzcG9uc2V9KXtcblxuICAgICAgICB2YXIgeDtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBhd2FpdCBEYXRhYmFzZS5yYXdRdWVyeShcIkRFTEVURSBGUk9NIGh1bWlkaXRpZXNcIilcbiAgICAgICAgICAgIGF3YWl0IGF4aW9zLmdldCgnaHR0cHM6Ly90aGluZ3NwZWFrLmNvbS9jaGFubmVscy85MzUzNDkvZmllbGQvMi5qc29uJylcbiAgICAgICAgICAgIC50aGVuKChyKSA9PiB7XG4gICAgICAgICAgICAgICAgIHggPSByLmRhdGEuZmVlZHNcbiAgICAgICAgICAgICAgICBIdW1pZGl0eS5jcmVhdGVNYW55KHgpXG4gICAgICAgICAgICB9KS5jYXRjaCgobSk9PntcbiAgICAgICAgICAgICAgICByZXNwb25zZS5iYWRSZXF1ZXN0KHttZXNzYWdlOlwibm8gZXhpc3RlbiByZWdpc3Ryb3NcIn0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlc3BvbnNlLm9rKHttZXNzYWdlOlwiUmVnaXN0cmFkb3MgY29ycmVjdGFtZW50ZVwiLGRhdGE6eH0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xuICAgICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdCh7bWVzc2FnZTpcIm5vIGV4aXN0ZW4gcmVnaXN0cm9zXCJ9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXN5bmMgTW9zdHJhckluZm8oe3Jlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBjb25zdCBodW0gPSBhd2FpdCBIdW1pZGl0eS5hbGwoKVxuICAgICAgICAgICAgcmVzcG9uc2Uub2soe21lc3NhZ2U6XCJkYXRvc1wiLGRhdGE6aHVtfSlcbiAgICAgICAgfVxuICAgICAgICBjYXRjaChlcnJvcil7XG4gICAgICAgICAgICByZXNwb25zZS5iYWRSZXF1ZXN0KHttZXNzYWdlOlwiZXJyb3IgYWwgbW9zdHJhclwifSlcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBhc3luYyBFbGltaW5hclRvZG8oe3Jlc3BvbnNlfTpIdHRwQ29udGV4dENvbnRyYWN0KXtcblxuICAgICAgICB0cnl7XG4gICAgICAgICAgICBhd2FpdCBEYXRhYmFzZS5yYXdRdWVyeShcIkRFTEVURSBGUk9NIGh1bWlkaXRpZXNcIilcbiAgICAgICAgICAgIHJlc3BvbnNlLm9rKHttZXNzYWdlOlwiRWxpbWluYWRvIGNvcnJlY3RhbWVudGVcIn0pXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2goZXJyb3Ipe1xuICAgICAgICAgICAgcmVzcG9uc2UuYmFkUmVxdWVzdCh7bWVzc2FnZTpcIk5vIGV4aXN0ZW4gZGF0b3NcIn0pXG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuIl19